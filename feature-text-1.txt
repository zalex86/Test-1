17.1. Версии программного кода
 Добавить страницу в мои закладки
→ Эта глава расскажет вам, что такое версии программного кода, зачем они нужны и как начать использовать версионирования в проекте.

ЧТО ТАКОЕ VCS (СКВ)?

Аббревиатура VCS (Version Control System) переводится как система контроля версий, или СКВ.

На текущий момент распространённых СКВ десятки, если не сотни. Одни из самых популярных СКВ с открытым кодом — это SVN, Mercurial и Git. 

Такие сайты, как Gitlab.com и Github.com, являются самыми крупными хранилищами программного кода в мире.

В этом модуле мы рассмотрим работу СКВ на примере Git. Эта система версий крайне надёжна, поддерживает распределённую работу и хранение данных.

В своей ежедневной работе с Git вы можете использовать консольный клиент, IDE или специализированные клиенты. В рамках модуля мы будем приводить примеры на базе консольной версии утилиты.

ЗАЧЕМ НАМ НУЖНЫ ВЕРСИИ КОДА?

Представьте, что вы пишете какой-нибудь документ и сохраняете его с названием . Проходит некоторое время и вы сохраняете документ_черновик_финал.doc. Дело вполне может закончиться рождением монстра документ_черновик_финал_проверено_в_печать.doc. Каждый из этих файлов — это определённая версия документа. 

Но при наличии определённого инструментария вы можете отменить почти любое изменение в файле (в определённом порядке, чаще всего в линейном). Вы можете сравнить содержимое этих двух файлов вплоть до тонкостей оформления. 

Когда вы будете передавать этот документ на правки кому-нибудь ещё, то вы можете сравнить то, что получаете обратно, с тем, что сделали сами.

То же самое применимо и к программному коду. Изменения в кодовой базе могут происходить очень часто. Чем больше людей участвует в разработке, тем больше изменений происходит. 

Благодаря версионированию вы можете сравнивать разные версии кода, получать изменения от других пользователей и передавать им свои. 

ЧТО ТАКОЕ ВЕРСИИ ПРОГРАММНОГО КОДА?

Определённый набор изменений и является, в некотором смысле, версией кода. Когда вы закрепляете этот набор изменений в СКВ, то формируете версию кода, которой можете полноценно манипулировать

Очень распространённой альтернативой словосочетанию «версия кода» является термин «набор изменений», или слово коммит (от англ. commit).

Версия кода необязательно является законченным продуктом, готовым для поставки конечному пользователю. Никто не мешает создать версию кода, содержащую недописанные слова или слова с опечатками. Но всё же под версией кода чаще всего подразумевают законченный набор изменений, для которого характерно следующее:

Изменения проходят базовые проверки анализаторами синтаксиса.
Изменения компилируются (если речь идёт о небольшом модуле).
Изменения логически связаны.
Могут предполагаться дальнейшие изменения, допустимо содержание ошибок. 
Версия кода может содержать как один файл, так и множество файлов. Эти файлы могут находиться в одной директории или в поддиректориях одного проекта. Они могут быть написаны на разных языках программирования, содержать данные в разных кодировках (хотя это не очень рекомендуется)… И вовсе не обязаны быть текстовыми файлами вообще. Довольно часто встречается ситуация, когда в СКВ необходимо держать, например, небольшие картинки (иконку сайта или его логотип).

Задание 17.1.1
1/1 point (graded)
Выберите пример текста, которые наиболее похожи на версию какого-нибудь текста:


Хороший вариант отлича
Хороший вариант текста отличается некоторой законченностью верно
Хорошй вариант ткста отличатеся законченнстью и отсуттвием ашибок.
Ответ
Верно:Предложение сформулировано и закончено.
ОтправитьВ некоторых задачах доступны следующие действия: сохранение, сброс, показ подсказки или ответа. Соответствующие кнопки расположены рядом с кнопкой «Отправить».

Показать Ответ
КАК «ВКЛЮЧИТЬ» ВЕРСИОНИРОВАНИЕ КОДА?

Допустим, вы хотите включить версионирование кода для своего проекта. Вы можете включить версионирование как в пустой папке и начать создавать проект в ней, так и инициализировать уже существующие изменения в готовом проекте. 

В следующем скринкасте мы покажем вам, как создать свой первый репозиторий на примере Github.


Задание 17.1.2
1/1 point (graded)
Какая команда инициализирует пустой репозиторий?


git open
git init верно
git clone
Ответ
Верно:Команда инициализирует пустой репозиторий.
ОтправитьВ некоторых задачах доступны следующие действия: сохранение, сброс, показ подсказки или ответа. Соответствующие кнопки расположены рядом с кнопкой «Отправить».

Показать Ответ
КОНТРОЛЬНОЕ ЗАДАНИЕ

Начните этот модуль с установки Git на свой компьютер.

Если вы используете Windows 10, то включите WSL и выполните команду: 

sudo apt-get install git
Если вы используете macOS, установите xcode command tools. Для этого введите в терминале команду:

git --help
Следуйте подсказкам операционной системы.

Если вы — пользователь Linux, используйте ваш пакетный менеджер для установки пакета git-all.

В случае затруднений воспользуйтесь справкой официального руководства.

Зарегистрируйтесь на сайте https://github.com и создайте свой собственный репозиторий. 



Убедитесь, что репозиторий публичный.



Через интерфейс Github добавьте в репозиторий файл с произвольным содержимым, а потом склонируйте его к себе на локальную машину. 

Важное замечание. Никогда не добавляйте в публичный репозиторий логины, пароли, платёжные детали и ключи доступа к сервисам (например, SSH-ключи). Для хранения подобной информации используются специальные средства, предоставляемые Github. Если вам необходимо хранить подобные данные рядом с кодом, то ознакомьтесь с документацией по использованию шифрованных секретов.

Если вам необходима консультация, вы всегда можете обратиться к ментору с вопросом.